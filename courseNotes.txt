// NOTES FROM NODE.JS COURSE

    // PDF File from course is available. 

// **************** __ 04/08/2019 __ ************** 


// **************** __ 04/07/2019 __ ************** 

  MONGODB: exploring basic CRUD operations ::

    // INSERTING  : Create

  // db.collection('users').insertOne({
      //   name:'Vikram',
      //   age: '26'
      // }, (error, result) => {
      //     if(error){
      //       return console.log('Unable to insert user');
      //     }

      //     console.log(result.ops)
      // })
    
      // db.collection('users').insertMany([
      //   {
      //     name: 'Jen',
      //     age: 28
      //   },
      //   {
      //     name: 'Gunther',
      //     age: 26
      //   }
      // ], (error, result)=>{
      //   if(error){
      //     return console.log('Unable to insert documents!')
      //   }

      //   console.log(result.ops);
      // })

    // db.collection('tasks').insertMany([
    //   {
    //     description: 'Buy groceries',
    //     completed: true
    //   },
    //   {
    //     description:  'Make marathon playlist',
    //     completed: false
    //   },
    //   {
    //     description: 'Finish portfolio site',
    //     completed: false
    //   }
    // ], (error,result)=>{
    //   if(error){
    //     return console.log('Unable to add tasks!')
    //   }

    //   console.log(result.ops)
    //  })




    //   READ

     // db.collection('users').findOne({_id: new ObjectID("5ca109a62810793e77941fe5")}, (error, user)=> {
  //   if(error){
  //     return console.log('Unable to fetch');
  //   }

  //   console.log(user);
  // })

  // db.collection('users').find({ age: 26 }).toArray((error,users) => {
  //   console.log(users);
  // })
  // db.collection('users').find({ age: 26 }).toArray((error,count) => {
  //   console.log(count);
  // })

  // db.collection('tasks').findOne({ _id: new ObjectID("5ca0fab0de7ddd3d78e6bef1") }, (error,task) =>{
  //   console.log(task);
  // })

  // db.collection('tasks').find({completed: false}).toArray((error,tasks)=>{
  //   console.log(tasks);
  // })





 // UPDATING: 

 // db.collection('users').updateOne({
  //     _id: new ObjectID("5ca8d2537480dc5432aa530e")
  //   }, {
  //     $inc: {
  //       age: 1
  //     }
  //   }).then((result)=>{
  //     console.log(result);
  //   }).catch((error)=>{
  //     console.log(error);
  //   })

  // db.collection('tasks').updateMany({
  //     completed:false
  //   },{
  //     $set: {
  //       completed: true
  //     }
  //   }
  
  // ).then((result)=>{
  //   console.log(result)
  // }).catch((error)=>{
  //   console.log(error)
  // })


  



})



explore: 

// **************** __ 03/28/2019 __ ************** 

MONGODB: 

INSTALLING: 

  1) Download from: https://www.mongodb.com/download-center/community  (whatever the current release is)
  2) Move 'mongodb' folder into main User DIRECTORY (run cd, than pwd if you want the path from CMD line)
  3) In same directory, create the 'mongodb-data' folder (sibling directory to mongodb just created)
  4) run /Users/(rcampbell1)/mongodb/bin/mongod --dbpath=/Users/(rcampbell1)/mongodb-data, to initialize server and populate database files in monogodb-data

STARTING::

  run: 
  -- -- /Users/(USERNAME)/mongodb/bin/mongod --dbpath=/Users/(USERNAME)/mongodb-data -- --

 - once mongoDB is located in your users folder:
  1) cd ~   (navigate to your user folder), run pwd to get path for 'users' folder
  2)  run 2 things: path from users to mongoDB and dataBase initializer with the mongodb-data folder:
    /Users/USERNAME/mongodb/bin/mongod --dbpath=/Users/USERNAME/mongodb-data

  ^ ^ this command must be run before connecting with Robo 3T
  3) In the GUI, ctr + click (connection Name) and open a new shell
  4) In shell, run:   db.version()  - (click the 'Play' button)



// **************** __ 03/26/2019 __ ************** 

Deploying to heroku: 

  1) once ssh keys are set up (and heroku cli is installed):
     run heroku keys:add
  2) heroku create ( UNIQUE NAME___ ex: campbell-weather-node-app)
  3) in package.json, create a start script:
     "start": "node src/app.js"
  4) git push heroku master

// **************** __ 03/21/2019 __ ************** 

  NODE: templating (handlebars), partials, views

  ** nodemon with js and hbs extenstions:    nodemon src/app.js -e js,hbs

    1) Configuration: 



// **************** __ 03/12/2019 __ ************** 

  // DEBUGGING


  // DEBUGGING

  1) insert: debugger
  2) from terimanal: node inspect fileName.js (command, etc...)
  3) in chrome:   chrome://inspect
  4) run debugger in source and stop at possible debugger breakpoints 

  - after you add/insert the 'debugger' keyword where you want to begin inpecting, run "node inspect fileName (other possible arguments)"

  *** IMPORTANT: TROUBLESHOOTING ***: 
      - DIDNT AUTOMATICALLY SHOW FILE, had to run this in terminal:
      ** YOUR WORKING DIRECTORY MUST BE CORRECT TO RUN DEBUGGER COMMAND FROM  TERMINAL:

        node --inspect-brk app.js


// **************** __ 03/9/2019 __ **************** //

    CONTINUING WITH YARGS

      -- -- example without Yargs:
          const command = process.argv[2];

          console.log(process.argv);

          if(command === 'add'){
            console.log(chalk.red.inverse('Added!'))
          } else if(command === 'remove'){
            console.log('Removed!')
          } 

  Working with command line arguments: 
    - you can access arguments passed after your intial file command (ex: node app.js ARUGMENT), and acessing them using: process.argv (ex: console.log(process.argv[2]) )

    - YARGS provides methods (command) for parsing command line arguments, making accessing and using these arguents much easier.

__ __
__ __

  // Create add command
          yargs.command({
            command: 'add',
            describe: 'Adding a note',
            builder: {
              title: {
                describe: 'Note Title',
                demandOption: true,
                type: 'string'
              },
              body: {
                describe: 'Note Body',
                demandOption: true,
                type: 'string'
              }
            },
            handler: (args)=>{
              console.log(`Title: ${args.title}`)
              console.log(`Title: ${args.body}`)
            }
          })

  ** After adding title and body, requiring both:


-- -- 
STORING DATA WITH JSON



//****************  __ 03/8/2019 __ ****************//

  Modules in Node.js (from NPM)
  __ __

  require() -> used to import and use various modules within another file. (typical in node.js to do basically anything, in the first case using 'fs' to write/create a new file.)

ex:   const fs = require('fs');
  __ __

  -  _fs_ (file system)
  - fs.writeFileSync(nameOfFile, data);
  - fs.appendFileSync(nameOfFile, data);

  __ fs __  (fileSystem) is resposible from writing to particular files. If the file in the first argument doesnt exist, it will create that file, and if it does, the content will be overridden. 

  __ __
  __ __

  : module.exports = variable;

      Whatever you define as 'module.exports' will be avaible/the return value when you require the file in another location. 


__ __ 
__ __

: Installing NPM and dependent modules

 - validator (npm install validator)
  useful functions: 
    .isEmail()
    .isURL()

__ __ 
__ __

: Global NPM modules and Nodemon

  install nodemon (globally): npm install nodemon -g 

