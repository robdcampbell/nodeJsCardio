// NOTES FROM NODE.JS COURSE

    // PDF File from course is available. 

// **************** __ 03/26/2019 __ ************** 

Deploying to heroku: 

  1) once ssh keys are set up (and heroku cli is installed):
     run heroku keys:add
  2) heroku create ( UNIQUE NAME___ ex: campbell-weather-node-app)

// **************** __ 03/21/2019 __ ************** 

  NODE: templating (handlebars), partials, views

  ** nodemon with js and hbs extenstions:    nodemon src/app.js -e js,hbs

    1) Configuration: 



// **************** __ 03/12/2019 __ ************** 

  // DEBUGGING


  // DEBUGGING

  1) insert: debugger
  2) from terimanal: node inspect fileName.js (command, etc...)
  3) in chrome:   chrome://inspect
  4) run debugger in source and stop at possible debugger breakpoints 

  - after you add/insert the 'debugger' keyword where you want to begin inpecting, run "node inspect fileName (other possible arguments)"

  *** IMPORTANT: TROUBLESHOOTING ***: 
      - DIDNT AUTOMATICALLY SHOW FILE, had to run this in terminal:
      ** YOUR WORKING DIRECTORY MUST BE CORRECT TO RUN DEBUGGER COMMAND FROM  TERMINAL:

        node --inspect-brk app.js


// **************** __ 03/9/2019 __ **************** //

    CONTINUING WITH YARGS

      -- -- example without Yargs:
          const command = process.argv[2];

          console.log(process.argv);

          if(command === 'add'){
            console.log(chalk.red.inverse('Added!'))
          } else if(command === 'remove'){
            console.log('Removed!')
          } 

  Working with command line arguments: 
    - you can access arguments passed after your intial file command (ex: node app.js ARUGMENT), and acessing them using: process.argv (ex: console.log(process.argv[2]) )

    - YARGS provides methods (command) for parsing command line arguments, making accessing and using these arguents much easier.

__ __
__ __

  // Create add command
          yargs.command({
            command: 'add',
            describe: 'Adding a note',
            builder: {
              title: {
                describe: 'Note Title',
                demandOption: true,
                type: 'string'
              },
              body: {
                describe: 'Note Body',
                demandOption: true,
                type: 'string'
              }
            },
            handler: (args)=>{
              console.log(`Title: ${args.title}`)
              console.log(`Title: ${args.body}`)
            }
          })

  ** After adding title and body, requiring both:


-- -- 
STORING DATA WITH JSON



//****************  __ 03/8/2019 __ ****************//

  Modules in Node.js (from NPM)
  __ __

  require() -> used to import and use various modules within another file. (typical in node.js to do basically anything, in the first case using 'fs' to write/create a new file.)

ex:   const fs = require('fs');
  __ __

  -  _fs_ (file system)
  - fs.writeFileSync(nameOfFile, data);
  - fs.appendFileSync(nameOfFile, data);

  __ fs __  (fileSystem) is resposible from writing to particular files. If the file in the first argument doesnt exist, it will create that file, and if it does, the content will be overridden. 

  __ __
  __ __

  : module.exports = variable;

      Whatever you define as 'module.exports' will be avaible/the return value when you require the file in another location. 


__ __ 
__ __

: Installing NPM and dependent modules

 - validator (npm install validator)
  useful functions: 
    .isEmail()
    .isURL()

__ __ 
__ __

: Global NPM modules and Nodemon

  install nodemon (globally): npm install nodemon -g 

